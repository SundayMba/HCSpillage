// <auto-generated />
using System;
using HCSpillage.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HCSpillage.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221212130616_AddOnlineSql")]
    partial class AddOnlineSql
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HCSpillage.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d8279a54-566d-4c42-8f45-c62e8879dd4a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64683401-2cd5-4bec-98cf-808b40bb7ceb",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC4v4Dv8i74Rf8Kwsq6DE2s1FiqcLKbY9eF/Mwisr+sOG00MmpMzQd+4GQGpeCx96g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "222c5e46-998d-43ff-8742-f86f79b97b18",
                            TwoFactorEnabled = false,
                            UserName = "Admin@gmail.com"
                        },
                        new
                        {
                            Id = "5a805103-d331-4154-93e8-d6ca4aec72ba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "084a9260-248f-44b1-bc7b-e1ce63ad7e32",
                            DeviceId = "A123",
                            Email = "Emma@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "EMMA@GMAIL.COM",
                            NormalizedUserName = "EMMA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKf1qiQ6g6vRJGUKxwVTHv8wNpu+O/zVfxLDIa8EvOPJuFPNFaO/txgUPVTmrDEamQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c34cbded-4eaf-4d05-be5c-aa187713f058",
                            TwoFactorEnabled = false,
                            UserName = "Emma@gmail.com"
                        },
                        new
                        {
                            Id = "36a578b8-e098-475b-8425-36290f6b30c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba00bc22-9b9d-48e2-aaef-95c4a1ea6246",
                            DeviceId = "A423",
                            Email = "abc@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            NormalizedEmail = "ABC@GMAIL.COM",
                            NormalizedUserName = "ABC@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH7C9iOyU42DzAXqryasuPnQbI0+LKBCYp21LfoXNIvixFhdpPTSEhhKxnoSp0SfSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0bb40c88-773e-4a0b-9b23-08686a130aa5",
                            TwoFactorEnabled = false,
                            UserName = "abc@GMAIL.COM"
                        });
                });

            modelBuilder.Entity("HCSpillage.Models.DataPresentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Config")
                        .HasColumnType("bit");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verify")
                        .HasColumnType("bit");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeviceData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Config = true,
                            Data = "No Gas Detected",
                            DeviceId = "A123",
                            Email = "emma@gmail.com",
                            Location = "Uyo",
                            Status = "On",
                            Time = "13:06",
                            Verify = false,
                            date = "12/12/2022"
                        },
                        new
                        {
                            Id = 2,
                            Config = true,
                            Data = "Gas detected",
                            DeviceId = "A123",
                            Email = "emma.@gmail.com",
                            Location = "Uyo",
                            Status = "On",
                            Time = "13:06",
                            Verify = true,
                            date = "12/12/2022"
                        },
                        new
                        {
                            Id = 3,
                            Config = false,
                            Data = "Gas detected",
                            DeviceId = "A123",
                            Email = "emma.@gmail.com",
                            Location = "Uyo",
                            Status = "On",
                            Time = "13:06",
                            Verify = true,
                            date = "12/12/2022"
                        },
                        new
                        {
                            Id = 4,
                            Config = false,
                            Data = "Gas detected",
                            DeviceId = "A423",
                            Email = "abc@gmail.com",
                            Location = "Oron",
                            Status = "On",
                            Time = "13:06",
                            Verify = false,
                            date = "12/12/2022"
                        },
                        new
                        {
                            Id = 5,
                            Config = false,
                            Data = "Gas detected",
                            DeviceId = "A423",
                            Email = "abc@gmail.com",
                            Location = "Oron",
                            Status = "On",
                            Time = "13:06",
                            Verify = false,
                            date = "12/12/2022"
                        },
                        new
                        {
                            Id = 6,
                            Config = false,
                            Data = "No Gas Detected",
                            DeviceId = "A423",
                            Email = "abc@gmail.com",
                            Location = "Oron",
                            Status = "On",
                            Time = "13:06",
                            Verify = true,
                            date = "12/12/2022"
                        },
                        new
                        {
                            Id = 7,
                            Config = true,
                            Data = "No Gas Detected",
                            DeviceId = "A423",
                            Email = "abc@gmail.com",
                            Location = "Oron",
                            Status = "On",
                            Time = "13:06",
                            Verify = true,
                            date = "12/12/2022"
                        },
                        new
                        {
                            Id = 8,
                            Config = false,
                            Data = "Gas detected",
                            DeviceId = "A423",
                            Email = "abc@gmail.com",
                            Location = "Oron",
                            Status = "On",
                            Time = "13:06",
                            Verify = false,
                            date = "12/12/2022"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "783c11bc-75a6-463a-b8aa-7a2697f6ef4f",
                            ConcurrencyStamp = "ea1a4aa1-a2d4-4132-a0e3-8debf0fab0cf",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a4719535-4dbb-4ea6-a41f-672c1a7f243e",
                            ConcurrencyStamp = "853c538c-fc2b-4ffa-bc7c-803dd64eb082",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d8279a54-566d-4c42-8f45-c62e8879dd4a",
                            RoleId = "783c11bc-75a6-463a-b8aa-7a2697f6ef4f"
                        },
                        new
                        {
                            UserId = "5a805103-d331-4154-93e8-d6ca4aec72ba",
                            RoleId = "a4719535-4dbb-4ea6-a41f-672c1a7f243e"
                        },
                        new
                        {
                            UserId = "36a578b8-e098-475b-8425-36290f6b30c8",
                            RoleId = "a4719535-4dbb-4ea6-a41f-672c1a7f243e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HCSpillage.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HCSpillage.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCSpillage.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HCSpillage.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
